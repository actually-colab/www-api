service: actually-colab-www-api

useDotenv: true

plugins:
  - serverless-stage-manager
  - serverless-webpack
  - serverless-offline
  - serverless-domain-manager
  - serverless-dynamodb-local

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: us-east-1

  iamRoleStatements:
  - Effect: 'Allow'
    Action:
      - dynamodb:Query
      - dynamodb:Scan
      - dynamodb:GetItem
      - dynamodb:PutItem
      - dynamodb:UpdateItem
      - dynamodb:DeleteItem
    Resource:
      - "Fn::GetAtt": [waitlistTable, Arn]

  environment:
    EXECUTION_STAGE: ${self:provider.stage}
    AWS_DEPLOYMENT_REGION: ${self:provider.region}

    AC_DDB_WAITLIST_TABLE_NAME: ${self:custom.dynamoTableNames.waitlistTableName}

    MAIL_HOST: ${env:MAIL_HOST}
    MAIL_USERNAME: ${env:MAIL_USERNAME}
    MAIL_PASSWORD: ${env:MAIL_PASSWORD}
  
  httpApi:
    cors:
      allowedOrigins:
        - 'http://localhost:3000'
        - 'https://www.actuallycolab.org'
        - 'https://actuallycolab.org'
      allowedHeaders:
        - Content-Type
        - X-Amz-Date
        - Authorization
        - X-Api-Key
        - X-Amz-Security-Token
        - X-Amz-User-Agent
      allowCredentials: false

  logs:
    httpApi: true

package:
  individually: true

custom:
  stages:
    - dev
    - production

  dynamoTableNames:
    waitlistTableName: Waitlist

  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      heapInitial: 200m
      heapMax: 1g
      migrate: true
      seed: true
      convertEmptyValues: true
      dbPath: "./.dynamodb/db"

  customDomain:
    http:
      domainName: www.api.actuallycolab.org
      stage: ${opt:stage, 'dev'}
      basePath: ${opt:stage, 'dev'}
      certificateName: '*.api.actuallycolab.org'
      createRoute53Record: true
      endpointType: regional
      securityPolicy: tls_1_2

  serverless-offline:
    stage: ${self:provider.stage}

  webpack:
    webpackConfig: 'webpack.config.ts'
    packager: 'yarn'
    includeModules:
      forceExclude:
        - aws-sdk
    packagerOptions:
      noFrozenLockfile: true

resources:
  Resources:
    activeSessionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.dynamoTableNames.waitlistTableName}
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: email
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

functions:
  join-waitlist:
    handler: src/waitlist.handler
    events:
      - httpApi:
          path: /waitlist
          method: post
